import torch
import torch.nn as nn

class LanguageModel(nn.Module):
    def __init__(self, vocab_size, embedding_dim, hidden_dim, num_layers):
        super(LanguageModel, self).__init__()
        self.embedding = nn.Embedding(vocab_size, embedding_dim)
        self.lstm = nn.LSTM(embedding_dim, hidden_dim, num_layers, batch_first=True)
        self.fc = nn.Linear(hidden_dim, vocab_size)

    def forward(self, x):
        x = self.embedding(x)
        x, _ = self.lstm(x)
        x = self.fc(x)
        return x

# Model yükleme
vocab_size = 100  # Buraya gerçek vocab_size değerini koyun
embedding_dim = 128
hidden_dim = 256
num_layers = 2
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

model = LanguageModel(vocab_size, embedding_dim, hidden_dim, num_layers).to(device)
model.load_state_dict(torch.load('model.pth'))
model.eval()
